@using System.Text
@using Microsoft.JSInterop
@using SimpleProgram.Lib.Archives
@using SimpleProgram.Lib.JSInterop
@using SimpleProgram.Lib.Tag


<div id="@($"plotly-{_id}")" style="height: 100%; width: 100%;">
    <LoadIndicator ref="_loadIndicator" IndicatorType="@LoadIndicator.IndicatorTypeEnum.Wave"/>
</div>

<div class="hide">
    <a onclick="@ExportPng" id="export-png"></a>
    <a onclick="@ExportCsv" id="export-csv"></a>
</div>


@functions{

#pragma warning disable 649
    LoadIndicator _loadIndicator;
#pragma warning restore 649

    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private ITag Tag { get; set; }
    
    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private SimplifyType SimplifyType { get; set; } = SimplifyType.None;
    
    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private int SimplifyTime { get; set; } = 3600;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private string PlotLyType { get; set; } = PlotlyTypes.scatter;

    [CascadingParameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private CascadingValueClassBase CascadingValue { get; set; }

    private int _id;

    private bool _rendered;

    protected override void OnInit()
    {
        _id = new Random().Next();

        CascadingValue.Update += () =>
        {
            _rendered = false;
            StateHasChanged();
        };
    }

    protected override async Task OnAfterRenderAsync()
    {
        var hidden = await JSRuntime.Current.InvokeAsync<bool>("global.isHidden", $"#plotly-{_id}");

        if (hidden)
        {
            _rendered = false;
            await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.purge", $"plotly-{_id}");
            return;
        }

        if (_rendered || Tag == null) return;

        _loadIndicator.Show();
        var plotLy = new Plotly();

        plotLy.AddData();

        var ts = (await Tag.GetArchiveTimeSeriesAsync(CascadingValue.DateTimeRange.Begin.ToDateTimeUnspecified(), 
            CascadingValue.DateTimeRange.End.ToDateTimeUnspecified(),
            SimplifyType, SimplifyTime)).Trim();

        plotLy.LastData.x = ts.Times;
        plotLy.LastData.y = ts.Values;
        plotLy.LastData.type = PlotLyType;

        plotLy.layout.showlegend = false;
        plotLy.layout.margin.l = 60;
        plotLy.layout.margin.r = 10;
        plotLy.layout.margin.t = 10;
        plotLy.layout.margin.b = 60;
        plotLy.config.displayModeBar = false;

        _rendered = await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", $"plotly-{_id}", plotLy);

        _loadIndicator.Hide();
    }

    private async void ExportPng()
    {
        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.downloadImage", $"plotly-{_id}");
    }

    private async void ExportCsv()
    {
        var str = new StringBuilder();

        foreach (var value 
            in await Tag.GetArchiveTimeSeriesAsync(CascadingValue.DateTimeRange.Begin.ToDateTimeUnspecified(), 
                CascadingValue.DateTimeRange.End.ToDateTimeUnspecified()))
            str.AppendLine($"{value.Key};{value.Value}");

        await JSRuntime.Current.InvokeAsync<bool>("filesaver.save", str.ToString());
    }

}