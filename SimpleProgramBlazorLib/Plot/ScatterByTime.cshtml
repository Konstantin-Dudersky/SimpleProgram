@using Microsoft.JSInterop
@using SimpleProgram.Lib.JSInterop
@using SimpleProgram.Lib.Tag
<div class="card" style="height: 100%; width: 100%;">
    <div class="card-divider align-center">
        <h6>@Header</h6>
    </div>
    <div id="@($"plotly-{_id}")" style="height: 100%; width: 100%;">

        @if (!_rendered)
        {
            <div class="sk-wave">
                <div class="sk-rect sk-rect1"></div>
                <div class="sk-rect sk-rect2"></div>
                <div class="sk-rect sk-rect3"></div>
                <div class="sk-rect sk-rect4"></div>
                <div class="sk-rect sk-rect5"></div>
            </div>
        }

    </div>
</div>


@functions{

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private string Header { get; set; } = "График";

    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private ITag Tag { get; set; }

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private DateTime BeginTime { get; set; } = DateTime.MinValue;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private DateTime EndTime { get; set; } = DateTime.MaxValue;

    [CascadingParameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private CascadingValueClassBase CascadingValue { get; set; }

    private int _id;

    private bool _rendered;

    protected override void OnInit()
    {
        _id = new Random().Next();

        CascadingValue.Update += () => { _rendered = false; };
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (_rendered || Tag == null) return;

        var plotLy = new Plotly();

        plotLy.ClearData();
        plotLy.AddData();

        var ts = await Tag.GetTimeSeriesAsync(BeginTime, EndTime);

        plotLy.LastData.x = ts.Times;
        plotLy.LastData.y = ts.Values;

        plotLy.layout.showlegend = false;
        plotLy.layout.margin.l = 60;
        plotLy.layout.margin.r = 10;
        plotLy.layout.margin.t = 10;
        plotLy.layout.margin.b = 60;
        plotLy.config.displayModeBar = false;

        _rendered = await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", $"plotly-{_id}", plotLy);

        StateHasChanged();
    }

}