@using System.Text
@using Microsoft.JSInterop
@using SimpleProgram.Lib.JSInterop
@using SimpleProgram.Lib.Tag


<div class="card grid-y @(_fullscreen ? "fullscreen" : "")" style="height: 100%;" id="testid">

    <div class="cell shrink card-divider">
        <h6 class="text-center" style="margin: 0; width: 100%">@Header</h6>
    </div>

    <div class="cell auto">

        <div id="@($"plotly-{_id}")" style="height: 100%; width: 100%;">

            @if (!_rendered)
            {
                <div class="sk-wave">
                    <div class="sk-rect sk-rect1"></div>
                    <div class="sk-rect sk-rect2"></div>
                    <div class="sk-rect sk-rect3"></div>
                    <div class="sk-rect sk-rect4"></div>
                    <div class="sk-rect sk-rect5"></div>
                </div>
            }

        </div>
    </div>

    <div class="cell shrink card-divider">

        <div class="grid-x align-middle align-justify" style="width: 100%;">

            <div class="cell auto">
                <ul class="pagination" style="margin: 0;">
                    @for (var i = 1; i <= 3; i++)
                    {
                        var i1 = i;
                        if (_currentPage == i)
                        {
                            <li class="current">
                                <i class="fa fa-circle"></i>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a onclick="@(() =>
                                              {
                                                  _rendered = false;
                                                  _currentPage = i1;
                                                  StateHasChanged();
                                              })">
                                    <i class="fa fa-circle"></i>
                                </a>
                            </li>
                        }
                    }
                </ul>
            </div>

            <div class="cell shrink">
                <div class="small button-group" style="margin: 0;">
                    <a class="button" onclick="@ExportPng">
                        <i class="fa fa-download fa-lg fa-fw" aria-hidden="true"></i> PNG
                    </a>
                    <a class="button" onclick="@ExportCsv">
                        <i class="fa fa-download fa-lg fa-fw" aria-hidden="true"></i> CSV
                    </a>
                    <a class="button" onclick="@Resize">
                        <i class="fa @(_fullscreen ? "fa-compress" : "fa-expand") fa-lg fa-fw" aria-hidden="true"></i>
                    </a>
                </div>
            </div>

        </div>
    </div>
</div>

@functions{

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private string Header { get; set; } = "График";

    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private ITag Tag { get; set; }

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private DateTime BeginTime { get; set; } = DateTime.MinValue;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private DateTime EndTime { get; set; } = DateTime.MaxValue;

    [CascadingParameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private CascadingValueClassBase CascadingValue { get; set; }

    private int _id;

    private bool _rendered;

    private int _currentPage = 1;

    private bool _fullscreen;

    protected override void OnInit()
    {
        _id = new Random().Next();

        CascadingValue.Update += () => { _rendered = false; };
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (_rendered || Tag == null) return;

        var plotLy = new Plotly();

        plotLy.ClearData();
        plotLy.AddData();

        var ts = await Tag.GetTimeSeriesAsync(BeginTime, EndTime);

        plotLy.LastData.x = ts.Times;
        plotLy.LastData.y = ts.Values;

        plotLy.layout.showlegend = false;
        plotLy.layout.margin.l = 60;
        plotLy.layout.margin.r = 10;
        plotLy.layout.margin.t = 10;
        plotLy.layout.margin.b = 60;
        plotLy.config.displayModeBar = false;

        _rendered = await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", $"plotly-{_id}", plotLy);

        StateHasChanged();
    }

    private async void ExportPng()
    {
        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.downloadImage", $"plotly-{_id}");
    }

    private async void ExportCsv()
    {
        var str = new StringBuilder();

        foreach (var value in await Tag.GetTimeSeriesAsync(BeginTime, EndTime))
            str.AppendLine($"{value.Key};{value.Value}");

        await JSRuntime.Current.InvokeAsync<bool>("filesaver.save", str.ToString());
    }

    private void Resize()
    {
        _fullscreen = !_fullscreen;
        _rendered = false;
        JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.purge", $"plotly-{_id}");
    }

}