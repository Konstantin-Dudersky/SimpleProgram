@using Microsoft.JSInterop

<svg viewBox="0 0 100 100" style="height: 100%; width: 100%;" id="@($"{_id}")">
    @* зеленый фон *@
    <path stroke-width="0" fill="#ADB223"
          d="M @Const.GapX @(Const.Height - Const.GapY)
                 h @(2 * Const.Radius)
                 a @Const.Radius @Const.Radius 0 0 0 -@(2 * Const.Radius) 0"/>

    @* Нижний предупредительный *@
    <path stroke-width="0" fill="#EDBB20"
          d="M @(Const.Radius + Const.GapX) @(Const.Height - Const.GapY)
                 h -@Const.Radius
                 a @Const.Radius @Const.Radius 0 0 1 @(Const.Radius * (1 - Math.Cos(_points.PvWlAngle))) -@(Const.Radius * Math.Sin(_points.PvWlAngle))"/>

    @* Нижний аварийный *@
    <path stroke-width="0" fill="#96355F"
          d="M @(Const.Radius + Const.GapX) @(Const.Height - Const.GapY)
                 h -@Const.Radius
                 a @Const.Radius @Const.Radius 0 0 1 @(Const.Radius * (1 - Math.Cos(_points.PvAlAngle))) -@(Const.Radius * Math.Sin(_points.PvAlAngle))"/>

    @* Верхний предупредительный *@
    <path stroke-width="0" fill="#EDBB20"
          d="M @(Const.Radius + Const.GapX) @(Const.Height - Const.GapY)
                 h -@Const.Radius
                 a @Const.Radius @Const.Radius 0 0 1 @(Const.Radius * (1 - Math.Cos(_points.PvWhAngle))) -@(Const.Radius * Math.Sin(_points.PvWhAngle))"
          transform="rotate(@(180 - _points.PvWhAngle * 180 / Math.PI), @(Const.Width / 2), @(Const.Height - Const.GapY))"/>

    @* Верхний аварийный *@
    <path stroke-width="0" fill="#96355F"
          d="M @(Const.Radius + Const.GapX) @(Const.Height - Const.GapY)
                 h -@Const.Radius
                 a @Const.Radius @Const.Radius 0 0 1 @(Const.Radius * (1 - Math.Cos(_points.PvAhAngle))) -@(Const.Radius * Math.Sin(_points.PvAhAngle))"
          transform="rotate(@(180 - _points.PvAhAngle * 180 / Math.PI), @(Const.Width / 2), @(Const.Height - Const.GapY))"
    />
    
    @* Полупрозрачный полукруг *@
    <path stroke-width="0" fill="#FFFFFF" opacity="0.7"
          d="M @(Const.GapX + 0.2 * Const.RadiusSmall) @(Const.Height - Const.GapY)
                 h @(2 * Const.RadiusSmall)
                 a @Const.RadiusSmall @Const.RadiusSmall 0 0 0 -@(2 * Const.RadiusSmall) 0"/>

    @* Стрелка *@
    <path stroke-width="5" fill="#233746" stroke="#FFF"
          d="M @(Const.Width / 2 - Const.NeedleLength) @(Const.Height - Const.GapY)
                 l @Const.NeedleLength -@Const.NeedleRadius
                 a @Const.NeedleRadius @Const.NeedleRadius 0 0 1 0 @(2 * Const.NeedleRadius) 
                 z"
          transform="rotate(@(_points.PvValueAngle * 180 / Math.PI), @(Const.Width / 2), @(Const.Height - Const.GapY))"
          vector-effect="non-scaling-stroke"/>

    @* Начальное значение *@
    <text x="@Const.GapX" y="@(Const.Height - Const.GapY + 5)" dominant-baseline="hanging"
          style="font-size: 5px;">
        @ScaleLow</text>

    @* Конечное значение *@
    <text x="@(Const.Width - Const.GapX)" y="@(Const.Height - Const.GapY + 5)"
          text-anchor="end" dominant-baseline="hanging"
          style="font-size: 5px;">
        @ScaleHigh</text>

    @* Текущее значение *@
    <text x="@(Const.Width / 2)" y="@(Const.Height - Const.GapY / 2)"
          text-anchor="middle" dominant-baseline="middle">
        @($"{Value:0.##}{ValueUnit}")
    </text>

</svg>

<div class="hide">
    @* <a onclick="@ExportPng" id="export-png"></a> *@
</div>

@functions
{
    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private double Value { get; set; }

    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private string ValueUnit { get; set; }

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private double ScaleLow { get; set; } = 0;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private double ScaleHigh { get; set; } = 100;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private double PvAlLim { get; set; } = double.MinValue;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private double PvWlLim { get; set; } = double.MinValue;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private double PvWhLim { get; set; } = double.MaxValue;

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private double PvAhLim { get; set; } = double.MaxValue;

    private Const _points;

    private string _id;

    protected override void OnInit()
    {
        _id = "svg-gauge-" + new Random().Next();
    }

    protected override Task OnParametersSetAsync()
    {
        _points.PvValueAngle = (Value - ScaleLow) * Math.PI / (ScaleHigh - ScaleLow);
        _points.PvAlAngle = (PvAlLim - ScaleLow) * Math.PI / (ScaleHigh - ScaleLow);
        _points.PvWlAngle = (PvWlLim - ScaleLow) * Math.PI / (ScaleHigh - ScaleLow);
        _points.PvWhAngle = (ScaleHigh - PvWhLim) * Math.PI / (ScaleHigh - ScaleLow);
        _points.PvAhAngle = (ScaleHigh - PvAhLim) * Math.PI / (ScaleHigh - ScaleLow);
        
        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync()
    {
    // баг https://github.com/aspnet/Blazor/issues/1571
    // после починки удалить
        await JSRuntime.Current.InvokeAsync<bool>("jquery.setAttribute", $"#{_id}", "viewBox", "0 0 100 100");
    }

    private struct Const
    {
        public double PvAlAngle;
        public double PvWlAngle;
        public double PvWhAngle;
        public double PvAhAngle;
        public double PvValueAngle;

        public const double NeedleLength = 35;
        public const double NeedleRadius = 5;
        public const double RadiusSmall = 0.7 * Radius;
        public const double GapX = (Width - 2 * Radius) / 2;
        public const double GapY = 30;
        public const double Radius = 40;
        public const double Width = 100;
        public const double Height = 100;
    }

}