#pragma checksum "E:\SimpleProgram\SimpleProgram\Blazor.App\Pages\BlazorPlot.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f6a865b5b6f4f7426c1c441166e68090225bf370"
// <auto-generated/>
#pragma warning disable 1591
namespace Blazor.App.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using Blazor.App;
    using Blazor.App.Shared;
    using SimpleProgram.Lib.Archives;
    using SimpleProgram.Lib;
    using Blazor.App.Services;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    public class BlazorPlot : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddMarkupContent(0, "<h1>Counter</h1>\n\n");
            builder.OpenElement(1, "input");
            builder.AddAttribute(2, "type", "number");
            builder.AddAttribute(3, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(Counter.Value));
            builder.AddAttribute(4, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => Counter.Value = __value, Counter.Value));
            builder.CloseElement();
            builder.AddContent(5, "\n\n");
            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "class", "button");
            builder.AddAttribute(8, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(Prompt));
            builder.AddContent(9, "Click me");
            builder.CloseElement();
            builder.AddContent(10, "\n\n");
            builder.OpenElement(11, "button");
            builder.AddAttribute(12, "class", "button");
            builder.AddAttribute(13, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(On));
            builder.AddContent(14, "on");
            builder.CloseElement();
            builder.AddContent(15, "\n");
            builder.OpenElement(16, "button");
            builder.AddAttribute(17, "class", "button");
            builder.AddAttribute(18, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(Off));
            builder.AddContent(19, "off");
            builder.CloseElement();
            builder.AddContent(20, "\n");
            builder.OpenElement(21, "span");
            builder.AddAttribute(22, "class", ((State.Value ? "success" : "secondary")) + " label");
            builder.AddContent(23, "label");
            builder.CloseElement();
            builder.AddMarkupContent(24, "\n\n\n\n<div id=\"tester\" style=\"height:400px;\"></div>");
        }
        #pragma warning restore 1998
#line 17 "E:\SimpleProgram\SimpleProgram\Blazor.App\Pages\BlazorPlot.cshtml"
             
    protected override void OnInit()
    {
        base.OnInit();

        if (State is null)
        {
            State = new Tag<bool>();
        }

        if (Counter is null)
        {
            Counter = new Tag<double>();
        }
    }

    [Parameter]
    private Tag<bool> State { get; set; }

    [Parameter]
    private Tag<double> Counter { get; set; }

    public Task<bool> Prompt()
    {
        Plot<string, double> plot = new Plot<string, double>();

        TimeSeries timeSeries = Data.tagGroup1.archiveTag1.GetTimeSeries();

        plot.data[0].x = timeSeries.Times.Select(x => x.ToString()).ToList();
        plot.data[0].y = timeSeries.Values;

        return JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", "tester", plot);
    }

    public void On()
    {
        State.Value = true;
    }

    public void Off()
    {
        State.Value = false;
    }


#line default
#line hidden
    }
}
#pragma warning restore 1591
