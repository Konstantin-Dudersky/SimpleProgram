@page "/cooling"
@using Blazor.App.Services

@inject Data Data

<div class="grid-x grid-padding-x grid-padding-y">
    <div class="cell small-12 medium-6 large-4" style="height: 400px;">
        <Widget

            Header="Температура нар. воздуха">

            <div class="page1">
                <Gauge
                    Value="50"
                    ValueUnit="°C"
                    ScaleLow="0"
                    ScaleHigh="100"
                    PvAlLim="10"
                    PvWlLim="30"
                    PvWhLim="80"
                    PvAhLim="90"/>
            </div>

            <div class="page2">
                <ScatterByTime
                    Tag="@Data.TGEnergy.temperature"/>
            </div>

            <div class="page3">
                <Gauge
                    Value="40"
                    ValueUnit="°C"
                    ScaleLow="0"
                    ScaleHigh="100"
                    PvAlLim="10"
                    PvWlLim="30"
                    PvWhLim="70"
                    PvAhLim="80"/>
            </div>

        </Widget>
    </div>

    <div class="cell small-12 medium-6 large-4" style="height: 400px;">
        <ScatterByTag
            Header="Потребление от темп. наружного воздуха (1 сутки)"
            TagX="@Data.TGEnergy.temperature"
            TagXSimplifyType="@SimplifyType.Average"
            TagY="@Data.TGEnergy.tagSum"
            TagYSimplifyType="@SimplifyType.Increment"
            SimplifyTime="86400"
            BeginTime="@CascadingValue.DateTimeRange.Begin"
            EndTime="@CascadingValue.DateTimeRange.End"/>
    </div>

    <div class="cell small-12 medium-6 large-4" style="height: 400px;">
        <SankeyComponent
            Header="Sankey"
            Sankey="@Sankey"/>
    </div>

</div>


@functions {

    [CascadingParameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private CascadingValueClass CascadingValue { get; set; }

    private Sankey Sankey { get; set; }

    private bool _rendered;

    protected override void OnInit()
    {
        CascadingValue.Update += () =>
        {
            _rendered = false;
            Sankey = null;
            StateHasChanged();
        };
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (_rendered) return;
        _rendered = true;

        Sankey = await BuildSankey();

        StateHasChanged();
    }

    private async Task<Sankey> BuildSankey()
    {
        var sankey = new Sankey();

        var begin = CascadingValue.DateTimeRange.Begin;
        var end = CascadingValue.DateTimeRange.End;

        var nodeCooling = sankey.AddNode("Холодоснабжение");

        var nodeChiller1 = sankey.AddNode("Чиллер 1");
        var nodeChiller2 = sankey.AddNode("Чиллер 2");
        var nodeChiller3 = sankey.AddNode("Чиллер 3");
        var nodeHydro1 = sankey.AddNode("Гидромодуль 1");
        var nodeHydro2 = sankey.AddNode("Гидромодуль 2");
        var nodeHydro3 = sankey.AddNode("Гидромодуль 3");

    // Холодоснабжение
        sankey.AddLink(nodeCooling, nodeChiller1,
            await Data.TGEnergy.MDB_A__QF2_1.IncrementAsync(begin, end), "Ввод 1");
        sankey.AddLink(nodeCooling, nodeChiller1,
            await Data.TGEnergy.MDB_B__QF2_1.IncrementAsync(begin, end), "Ввод 2");
        sankey.AddLink(nodeCooling, nodeChiller2,
            await Data.TGEnergy.MDB_A__QF2_2.IncrementAsync(begin, end), "Ввод 1");
        sankey.AddLink(nodeCooling, nodeChiller2,
            await Data.TGEnergy.MDB_B__QF2_2.IncrementAsync(begin, end), "Ввод 2");
        sankey.AddLink(nodeCooling, nodeChiller3,
            await Data.TGEnergy.MDB_A__QF2_3.IncrementAsync(begin, end), "Ввод 1");
        sankey.AddLink(nodeCooling, nodeChiller3,
            await Data.TGEnergy.MDB_B__QF2_3.IncrementAsync(begin, end), "Ввод 2");

        sankey.AddLink(nodeCooling, nodeHydro1,
            await Data.TGEnergy.MDB_B__QF2_4.IncrementAsync(begin, end), "Ввод 1");
        sankey.AddLink(nodeCooling, nodeHydro1,
            await Data.TGEnergy.UPS_MDB_A__QF4_1.IncrementAsync(begin, end), "Ввод 2");
        sankey.AddLink(nodeCooling, nodeHydro2,
            await Data.TGEnergy.MDB_B__QF2_5.IncrementAsync(begin, end), "Ввод 1");
        sankey.AddLink(nodeCooling, nodeHydro2,
            await Data.TGEnergy.UPS_MDB_A__QF4_2.IncrementAsync(begin, end), "Ввод 2");
        sankey.AddLink(nodeCooling, nodeHydro3,
            await Data.TGEnergy.MDB_B__QF2_6.IncrementAsync(begin, end), "Ввод 1");
        sankey.AddLink(nodeCooling, nodeHydro3,
            await Data.TGEnergy.UPS_MDB_A__QF4_3.IncrementAsync(begin, end), "Ввод 2");


        return sankey;
    }

}