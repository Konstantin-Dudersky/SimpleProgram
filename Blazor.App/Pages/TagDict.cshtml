@page "/TagDict"
@using Blazor.App.Services
@inject Data data

<style>
    /* скрывает стобцы */
    #testable tr td:nth-child(0),
    #testable tr th:nth-child(0) { display: none; }
</style>

<div class="grid-x align-middle">
    <div class="cell">
        <table class="hover unstriped scroll" id="testable">
            <thead>
            <tr>
                <th>@nameof(ITag.TagId)</th>
                <th>@nameof(ITag.TagName)</th>
                <th>@nameof(ITag.ArchiveTagId)</th>
                <th>@nameof(ITag.Archive.ArchiveName)</th>
                <th>@nameof(ITag.ValueString)</th>
                <th>@nameof(ITag.GenericType)</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var tag in data.TagDict.Values)
            {
                <tr>
                    <td>@tag.TagId</td>
                    <td>@tag.TagName</td>
                    <td>@tag.ArchiveTagId</td>
                    <td>@tag.Archive.ArchiveName</td>
                    <td>
                        <input style="margin-bottom: 0" type="text" class="@(tag.InputValid ? "" : "is-invalid-input")"
                               bind="@tag.ValueString" onfocusin="@StopRefresh" onfocusout="@StartRefresh"/>
                    </td>
                    <td>@tag.GenericType</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>


@functions
{
    private bool _refresh;

    protected override void OnInit()
    {
        base.OnInit();
        StartRefresh();
    }

    private void StartRefresh()
    {
        if (_refresh) return;
        _refresh = true;
        data.OnRefresh += StateHasChanged;
    }

    private void StopRefresh()
    {
        if (!_refresh) return;
        _refresh = false;
        data.OnRefresh -= StateHasChanged;
    }

}