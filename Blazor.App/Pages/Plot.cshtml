@page "/Plot"
@page "/Plot/{TagId}"
@using System.Globalization
@using Blazor.App.Services
@using SimpleProgram.Lib.JSInterop
@inject Data data


<ul class="tabs" data-tabs id="example-tabs">
    <li class="tabs-title is-active">
        <a data-tabs-target="panel1" >Выбор тегов</a>
    </li>
    <li class="tabs-title">
        <a data-tabs-target="panel2" onmouseup="@Build">График</a>
    </li>
</ul>

<div class="tabs-content" data-tabs-content="example-tabs">

    <div class="tabs-panel is-active" id="panel1">

        <ul class="accordion" data-accordion>
            
            @foreach(var selectedTag in _selectedTagId)
            {
                <li class="accordion-item" data-accordion-item>
                    <a class="accordion-title">@(selectedTag.tagId == "" ? "-- Тег не выбран --" : selectedTag.tagId)</a>
                    <div class="accordion-content" data-tab-content>
                        <div class="grid-x align-middle">
                            <div class="cell small-12 medium-8 large-6">
                                <select bind="@selectedTag.tagId">
                                    <option value="" selected>-- Тег не выбран --</option>
                                    @foreach (var tag in data.TagDict)
                                    {
                                        <option value="@tag.Key">@tag.Value.ArchiveTagId</option>
                                    }
                                </select>
                            </div>
                            <div class="cell small-6 large-2">
                                <select bind="@selectedTag.plotlyType">
                                    @foreach (var t in _plotlyTypesList)
                                    {
                                        <option value="@t">@t</option>
                                    }
                                </select>
                            </div>
                            
                        </div>
                    </div>
                </li>
            }
            
        </ul>

    </div>

    <div class="tabs-panel" id="panel2">
        <div id="plotly" style="height: 500px"></div>
    </div>
</div>


@functions
{

    protected override void OnInit()
    {
        base.OnInit();
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId[0].tagId = TagId ?? "";
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (_jqueryInitialized) return;
        _jqueryInitialized = await JSRuntime.Current.InvokeAsync<bool>("global.foundationInit");
    }

    private bool _jqueryInitialized;

    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private string TagId { get; set; }

    private readonly List<PlotlyBlalzorParam> _selectedTagId = new List<PlotlyBlalzorParam>();

    private readonly List<string> _plotlyTypesList = PlotlyTypes.GetTypesList();

    private async void Build()
    {
       
        var plotly = new Plotly<string, double?>(_selectedTagId.Count);

        for (var i = 0; i < _selectedTagId.Count; i++)
        {
            if (_selectedTagId[i].tagId == "") continue;

            var timeSeries = data.TagDict[_selectedTagId[i].tagId].GetTimeSeries().IncreaseCountByPeriod(ByPeriod.Hour);
            
            if (_selectedTagId[i].plotlyType == PlotlyTypes.heatmap)
            {
                plotly.data[i].x = timeSeries.Times.Select(x => x.ToString(CultureInfo.InvariantCulture)).ToList();
                plotly.data[i].y = new List<double?>(){0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
                plotly.data[i].z = timeSeries.Values;
            }

            else
            {
                plotly.data[i].x = timeSeries.Times.Select(x => x.ToString(CultureInfo.InvariantCulture)).ToList();
                plotly.data[i].y = timeSeries.Values;
            }

            plotly.data[i].name = data.TagDict[_selectedTagId[i].tagId].TagName;
            plotly.data[i].type = _selectedTagId[i].plotlyType;
            plotly.layout.title = "";
        }
        
        

        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", "plotly", plotly);
    }

}