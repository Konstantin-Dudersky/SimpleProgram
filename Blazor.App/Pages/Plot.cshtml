@page "/Plot"
@page "/Plot/{TagId}"
@using System.ComponentModel.DataAnnotations
@using Blazor.App.Services
@using SimpleProgram.Lib.JSInterop
@inject Data data

@* <style> *@
@*     .cell { *@
@*         border: 1px solid red; *@
@*     } *@
@*      *@
@* </style> *@

<ul class="tabs" data-tabs id="example-tabs">
    <li class="tabs-title is-active">
        <a data-tabs-target="panel1" onmouseup="@Purge">Выбор тегов</a>
    </li>
    <li class="tabs-title">
        <a data-tabs-target="panel2" onmouseup="@Purge">Настройка графика</a>
    </li>
    <li class="tabs-title">
        <a data-tabs-target="panel3" onmouseup="@Build">График</a>
    </li>
</ul>

<div class="tabs-content" data-tabs-content="example-tabs">

    <div class="tabs-panel is-active" id="panel1">

        <ul class="accordion" data-accordion>

            @foreach (var selectedTag in _selectedTagId)
            {
                <li class="accordion-item" data-accordion-item>
                    <a class="accordion-title">@(selectedTag.tagId == "" ? "-- Тег не выбран --" : selectedTag.tagId)</a>
                    <div class="accordion-content" data-tab-content>
                        <div class="grid-x align-middle grid-padding-x">
                            <div class="cell small-12 medium-8 large-6">
                                <select bind="@selectedTag.tagId">
                                    <option value="" selected>-- Тег не выбран --</option>
                                    @foreach (var tag in data.TagDict)
                                    {
                                        <option value="@tag.Key">@tag.Value.ArchiveTagId</option>
                                    }
                                </select>
                            </div>

                            <div class="cell small-6 large-2">
                                <select bind="@selectedTag.transform">
                                    <option value="@PlotlyTransform.Without">-- Без трансформации --</option>
                                    <option value="@PlotlyTransform.Increment">Приращение</option>
                                </select>
                            </div>

                            <div class="cell small-6 large-1">
                                <input type="number" class="expanded" bind="@selectedTag.transformTime"/>
                            </div>

                            <div class="cell small-6 large-1">
                                <select bind="@selectedTag.transformTimeCoef">
                                    <option value="60">минут</option>
                                    <option value="3600">часов</option>
                                    <option value="86400">день</option>
                                    <option value="2592000">месяц</option>
                                </select>
                            </div>

                            <div class="cell small-6 large-2">
                                <select bind="@selectedTag.plotlyType">
                                    @foreach (var t in _plotlyTypesList)
                                    {
                                        <option value="@t">@t</option>
                                    }
                                </select>
                            </div>

                            <div class="cell small-6 large-2">
                                <select bind="@selectedTag.yaxis">
                                    @foreach (var y in Plotly.Data.YaxisEnum.Values)
                                    {
                                        <option value="@y">@y</option>
                                    }
                                </select>
                            </div>

                        </div>
                    </div>
                </li>
            }

        </ul>

    </div>

    <div class="tabs-panel" id="panel2">
        <div class="grid-x align-middle grid-padding-x">
            <div class="small-3 large-1 cell">
                <label for="right-label" class="text-right middle">Заголовок</label>
            </div>
            <div class="small-12 large-5 cell">
                <input type="text" id="right-label" placeholder="Заголовок" bind="@_plotly.layout.title"/>
            </div>
        </div>

        <ul class="accordion" data-accordion>
            @foreach (var y in new List<Plotly.Layout.Yaxis> {_plotly.layout.yaxis, _plotly.layout.yaxis2})
            {
                <li class="accordion-item" data-accordion-item>
                    <a class="accordion-title">@y</a>
                    <div class="accordion-content" data-tab-content>
                        <div class="grid-x align-middle grid-padding-x">
                            
                            @* overlaying *@
                            <div class="cell small-6 large-1">
                                <label for="" class="text-right middle">Overlaying</label>
                            </div>
                            <div class="cell small-6 large-1">
                                <input type="text" id="" bind="@y.overlaying" placeholder="overlaying"/>
                            </div>

                            @* side *@
                            <div class="cell small-6 large-1">
                                <label for="" class="text-right middle">Side</label>
                            </div>
                            <div class="cell small-6 large-1">
                                <select id="" bind="@y.side">
                                    @foreach (var side in Plotly.Layout.Yaxis.SideEnum.Values)
                                    {
                                        <option value="@side">@side</option>
                                    }
                                </select>
                            </div>

                            @* anchor *@
                            <div class="cell small-6 large-1">
                                <label for="" class="text-right middle">Anchor</label>
                            </div>
                            <div class="cell small-6 large-1">
                                <input type="text" placeholder="anchor" bind="@y.anchor"/>
                            </div>

                            @* position *@
                            <div class="cell small-6 large-1">
                                <label for="" class="text-right middle">Position</label>
                            </div>
                            <div class="cell small-6 large-1">
                                <input type="text" placeholder="position" bind="@y.position"/>
                            </div>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>

    <div class="tabs-panel" id="panel3">
        <div id="plotly" style="height: 500px"></div>
    </div>
</div>


@functions
{

    protected override void OnInit()
    {
        base.OnInit();
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId[0].tagId = TagId ?? "";

        _plotly = new Plotly(_selectedTagId.Count);
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (_jqueryInitialized) return;
        _jqueryInitialized = await JSRuntime.Current.InvokeAsync<bool>("global.foundationInit");
    }

    private bool _jqueryInitialized;

    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private string TagId { get; set; }

    private readonly List<PlotlyBlalzorParam> _selectedTagId = new List<PlotlyBlalzorParam>();

    private readonly List<string> _plotlyTypesList = PlotlyTypes.GetTypesList();

    Plotly _plotly;

    private async void Build()
    {
        for (var i = 0; i < _selectedTagId.Count; i++)
        {
            if (_selectedTagId[i].tagId == "")
            {
                _plotly.data[i].x = null;
                _plotly.data[i].y = null;
                _plotly.data[i].z = null;
                continue;
            }
                

            var timeSeries = data.TagDict[_selectedTagId[i].tagId].GetTimeSeries();

            if (_selectedTagId[i].transform == PlotlyTransform.Increment)
                timeSeries = timeSeries.IncreaseCountByPeriod(_selectedTagId[i].transformTime * _selectedTagId[i].transformTimeCoef);

            var heatmap = timeSeries.ConvertToHeatmap(_selectedTagId[i].transformTime * _selectedTagId[i].transformTimeCoef);

            if (_selectedTagId[i].plotlyType == PlotlyTypes.heatmap)
            {
                _plotly.data[i].y = heatmap.YToString;
                _plotly.data[i].x = heatmap.X;
//                _plotly.data[i].x = new List<double?> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};
                _plotly.data[i].z = heatmap.Z;
            }
            else
            {
                _plotly.data[i].x = timeSeries.TimesToPlotly();
                _plotly.data[i].y = timeSeries.Values;
            }

            _plotly.data[i].name = data.TagDict[_selectedTagId[i].tagId].TagName;
            _plotly.data[i].type = _selectedTagId[i].plotlyType;
            _plotly.data[i].yaxis = _selectedTagId[i].yaxis;
        }

    //        Console.WriteLine(Microsoft.JSInterop.Json.Serialize(_plotly.layout));

        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", "plotly", _plotly);
    }

    private static async void Purge()
    {
        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.purge", "plotly");
    }

}