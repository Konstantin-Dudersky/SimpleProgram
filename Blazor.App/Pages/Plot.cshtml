@page "/Plot"
@page "/Plot/{TagId}"
@using System.Globalization
@using Blazor.App.Services
@using SimpleProgram.Lib.JSInterop
@inject Data Data


<ul class="tabs" data-tabs id="example-tabs">
    <li class="tabs-title is-active">
        <a data-tabs-target="panel1" onmouseup="@Purge">Выбор тегов</a>
    </li>
    <li class="tabs-title">
        <a data-tabs-target="panel2" onmouseup="@Purge">Настройка графика</a>
    </li>
    <li class="tabs-title">
        <a data-tabs-target="panel3" onmouseup="@BuildPlot">График</a>
    </li>
</ul>

<div class="tabs-content" data-tabs-content="example-tabs" style="height: 95%;">

<div class="tabs-panel is-active" id="panel1">

<div class="grid-x align-middle grid-padding-x">

    <div class="cell small-2 medium-2 large-1">
        <label for="beginDate" class="text-right middle">От:</label>

    </div>
    <div class="cell small-10 medium-4 large-2">
        <input id="beginDate" type="date" value="@BeginDateStr"
               onchange="@((UIChangeEventArgs e) => BeginDateStr = e.Value.ToString())"/>
    </div>

    <div class="cell small-2 medium-2 large-1">
        <label for="endDate" class="text-right middle">До:</label>
    </div>

    <div class="cell small-10 medium-4 large-2">
        <input id="endDate" type="date" value="@EndDateStr"
               onchange="@((UIChangeEventArgs e) => EndDateStr = e.Value.ToString())"/>
    </div>

</div>

<ul class="accordion" data-accordion>

    @foreach (var tag in _selectedTagId)
    {
        <li class="accordion-item" data-accordion-item>
            <a class="accordion-title">@(tag.tagId == "" ? "-- Тег не выбран --" : tag.tagId)</a>
            <div class="accordion-content" data-tab-content>
                <div class="grid-x align-middle grid-padding-x">

                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.plotlyType)}-{tag.GetHashCode()}")"
                               class="text-right middle">
                            Тип
                        </label>
                    </div>

                    <div class="cell small-12 medium-4 large-3">
                        <select bind="@tag.plotlyType"
                                id="@($"{nameof(tag.plotlyType)}-{tag.GetHashCode()}")">
                            @foreach (var t in _plotLyTypesList)
                            {
                                <option value="@t">@t</option>
                            }
                        </select>
                    </div>


                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.DataModeLines)}-{tag.GetHashCode()}")"
                               class="text-right middle">
                            Отображать
                        </label>
                    </div>

                    <div class="cell small-12 medium-4 large-5">
                        <div class="expanded button-group">
                            <a class="button @(tag.DataModeLines ? "primary" : "secondary")"
                               onclick="@(() => tag.DataModeLines = !tag.DataModeLines)"
                               for="@($"{nameof(tag.DataModeLines)}-{tag.GetHashCode()}")">
                                Линии
                            </a>
                            <a class="button @(tag.DataModeMarkers ? "primary" : "secondary")"
                               onclick="@(() => tag.DataModeMarkers = !tag.DataModeMarkers)">
                                Маркеры
                            </a>
                            <a class="button @(tag.DataModeText ? "primary" : "secondary")"
                               onclick="@(() => tag.DataModeText = !tag.DataModeText)">
                                Текст
                            </a>
                        </div>
                    </div>


                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.yaxis)}-{tag.GetHashCode()}")"
                               class="text-right middle">
                            Ось Y
                        </label>
                    </div>

                    <div class="cell small-12 medium-4 large-1">
                        <select bind="@tag.yaxis"
                                id="@($"{nameof(tag.yaxis)}-{tag.GetHashCode()}")">
                            @foreach (var y in Plotly.Data.YaxisEnum.Values)
                            {
                                <option value="@y">@y</option>
                            }
                        </select>
                    </div>


                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.transformTime)}-{tag.GetHashCode()}")"
                               class="text-right middle">
                            Период
                        </label>
                    </div>

                    <div class="cell small-6 medium-2 large-1">
                        <input type="number" class="expanded" bind="@tag.transformTime"
                               id="@($"{nameof(tag.transformTime)}-{tag.GetHashCode()}")"/>
                    </div>

                    <div class="cell small-6 medium-2 large-1">
                        <select bind="@tag.transformTimeCoef">
                            <option value="60">минута</option>
                            <option value="3600" selected>час</option>
                            <option value="86400">день</option>
                            <option value="2592000">месяц</option>
                        </select>
                    </div>

                </div>


                <div class="grid-x align-middle grid-padding-x">

                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.tagId)}-{tag.GetHashCode()}")"
                               class="text-right middle">
                            Тег (ось Y)
                        </label>
                    </div>

                    <div class="cell small-12 medium-10 large-5">
                        <select bind="@tag.tagId" id="@($"{nameof(tag.tagId)}-{tag.GetHashCode()}")">
                            <option value="" selected>-- Тег не выбран --</option>
                            @foreach (var tagDict in Data.TagDict)
                            {
                                <option value="@tagDict.Key">@tagDict.Key (@tagDict.Value.TagName)</option>
                            }
                        </select>
                    </div>


                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.transform)}-{tag.GetHashCode()}")"
                               class="text-right middle">
                            Трансформация
                        </label>
                    </div>

                    <div class="cell small-12 medium-4 large-2">
                        <select bind="@tag.transform"
                                id="@($"{nameof(tag.transform)}-{tag.GetHashCode()}")">
                            <option value="@SimplifyType.None">-- Без трансформации --</option>
                            <option value="@SimplifyType.Increment">Приращение</option>
                            <option value="@SimplifyType.Average">Усреднение</option>
                            <option value="@SimplifyType.Max">Максимум</option>
                            <option value="@SimplifyType.Min">Минимум</option>
                        </select>
                    </div>

                </div>

                <div class="grid-x align-middle grid-padding-x">

                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.tagIdX)}-{tag.GetHashCode()}")"
                               class="text-right middle">
                            Тег (ось Х)
                        </label>
                    </div>

                    <div class="cell small-12 medium-10 large-5">
                        <select bind="@tag.tagIdX"
                                id="@($"{nameof(tag.tagIdX)}-{tag.GetHashCode()}")">
                            <option value="" selected>-- Время --</option>
                            @foreach (var tagDict in Data.TagDict)
                            {
                                <option value="@tagDict.Key">@tagDict.Value.TagChannelDatabase?.Id</option>
                            }
                        </select>
                    </div>

                    <div class="cell small-12 medium-2 large-1">
                        <label for="@($"{nameof(tag.transformX)}-{tag.GetHashCode()}")"
                               class="text-right middle @(tag.tagIdX == "" ? "invisible" : "")">
                            Трансформация
                        </label>
                    </div>

                    <div class="cell small-12 medium-4 large-2">
                        <select bind="@tag.transformX"
                                class="@(tag.tagIdX == "" ? "invisible" : "")"
                                id="@($"{nameof(tag.transformX)}-{tag.GetHashCode()}")">
                            <option value="@SimplifyType.Increment">Приращение</option>
                            <option value="@SimplifyType.Average">Усреднение</option>
                            <option value="@SimplifyType.Max">Максимум</option>
                            <option value="@SimplifyType.Min">Минимум</option>
                        </select>
                    </div>

                </div>
            </div>
        </li>
    }

</ul>

</div>

<div class="tabs-panel" id="panel2">
    <div class="grid-x align-middle grid-padding-x">
        <div class="small-3 large-1 cell">
            <label for="right-label" class="text-right middle">Заголовок</label>
        </div>
        <div class="small-12 large-5 cell">
            <input type="text" id="right-label" placeholder="Заголовок" bind="@_plotLy.layout.title"/>
        </div>
    </div>

    <ul class="accordion" data-accordion>
        @foreach (var y in new List<Plotly.Layout.Yaxis> {_plotLy.layout.yaxis, _plotLy.layout.yaxis2})
        {
            <li class="accordion-item" data-accordion-item>
                <a class="accordion-title">@y</a>
                <div class="accordion-content" data-tab-content>
                    <div class="grid-x align-middle grid-padding-x">

                        @* overlaying *@
                        <div class="cell small-6 large-1">
                            <label for="@($"{nameof(y.overlaying)}-{y.GetHashCode()}")" 
                                   class="text-right middle">Overlaying</label>
                        </div>
                        <div class="cell small-6 large-1">
                            <input type="text" id="@($"{nameof(y.overlaying)}-{y.GetHashCode()}")" 
                                   bind="@y.overlaying" placeholder="overlaying"/>
                        </div>

                        @* side *@
                        <div class="cell small-6 large-1">
                            <label for="@($"{nameof(y.side)}-{y.GetHashCode()}")" 
                                   class="text-right middle">Side</label>
                        </div>
                        <div class="cell small-6 large-1">
                            <select id="@($"{nameof(y.side)}-{y.GetHashCode()}")" 
                                    bind="@y.side">
                                @foreach (var side in Plotly.Layout.Yaxis.SideEnum.Values)
                                {
                                    <option value="@side">@side</option>
                                }
                            </select>
                        </div>

                        @* anchor *@
                        <div class="cell small-6 large-1">
                            <label for="@($"{nameof(y.anchor)}-{y.GetHashCode()}")"
                                   class="text-right middle">Anchor</label>
                        </div>
                        <div class="cell small-6 large-1">
                            <input type="text" id="@($"{nameof(y.anchor)}-{y.GetHashCode()}")" 
                                   placeholder="anchor" bind="@y.anchor"/>
                        </div>

                        @* position *@
                        <div class="cell small-6 large-1">
                            <label for="@($"{nameof(y.position)}-{y.GetHashCode()}")" 
                                   class="text-right middle">Position</label>
                        </div>
                        <div class="cell small-6 large-1">
                            <input type="text" id="@($"{nameof(y.position)}-{y.GetHashCode()}")" 
                                   placeholder="position" bind="@y.position"/>
                        </div>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

<div class="tabs-panel" id="panel3" style="height: 100%;">
    <div class="grid-y" style="height: 100%;">
        <div class="cell">
            <div class="grid-x">
                <div class="cell small-6 medium-4 large-2">
                    <button class="button expanded" onclick="@DownloadImage">Загрузить изображение</button>
                </div>
            </div>
        </div>

        <div class="cell auto">
            <div id="plotly" style="height: 100%; width: 100%"></div>
        </div>
    </div>
</div>

</div>



@functions
{

    protected override void OnInit()
    {
        base.OnInit();
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());
        _selectedTagId.Add(new PlotlyBlalzorParam());

        _plotLy = new Plotly();
    }

    private bool _jqueryInitialized;

    protected override async Task OnAfterRenderAsync()
    {
        if (_jqueryInitialized) return;
        _jqueryInitialized = await JSRuntime.Current.InvokeAsync<bool>("global.foundationInit");
    }

    private readonly List<PlotlyBlalzorParam> _selectedTagId = new List<PlotlyBlalzorParam>();
    private readonly List<string> _plotLyTypesList = PlotlyTypes.GetTypesList();

    Plotly _plotLy;

    private string BeginDateStr { get; set; } = DateTime.Now.AddMonths(-1).ToString("yyyy-MM-dd");
    private string EndDateStr { get; set; } = DateTime.Now.ToString("yyyy-MM-dd");


    private async void BuildPlot()
    {
        _plotLy.ClearData();

        foreach (var tag in _selectedTagId)
        {
            if (tag.tagId == "")
                continue;

            var result = DateTime.TryParseExact(BeginDateStr, "yyyy-MM-dd", CultureInfo.InvariantCulture,
                DateTimeStyles.None, out var begin);
            if (!result)
                begin = DateTime.MinValue;

            result = DateTime.TryParseExact(EndDateStr, "yyyy-MM-dd", CultureInfo.InvariantCulture,
                DateTimeStyles.None, out var end);
            if (!result)
                end = DateTime.MaxValue;


            var ts = await Data.TagDict[tag.tagId].GetArchiveTimeSeriesAsync(begin, end,
                tag.transform, tag.transformTime * tag.transformTimeCoef);

            switch (tag.plotlyType)
            {
                case PlotlyTypes.scatter:
                case PlotlyTypes.scattergl:
                {
                    if (tag.tagIdX == "")
                    {
                        // на оси Х выбрано время
                        _plotLy.AddData();

                        _plotLy.LastData.x = ts.TimesToPlotly();
                        _plotLy.LastData.y = ts.Values;
                    }
                    else
                    {
                        _plotLy.AddData();

                        var tsX = await Data.TagDict[tag.tagIdX].GetArchiveTimeSeriesAsync(begin, end,
                            tag.transformX, tag.transformTime * tag.transformTimeCoef);

                        var scatter = new Scatter(tsX, ts);
                        _plotLy.LastData.x = scatter.X;
                        _plotLy.LastData.y = scatter.Y;
                    }
                    break;
                }


                case PlotlyTypes.heatmap:
                {
                    _plotLy.AddData();

                    var heatMap = ts.ToHeatmap();

                    _plotLy.LastData.y = heatMap.YToString;
                    _plotLy.LastData.x = heatMap.X;
                    _plotLy.LastData.z = heatMap.Z;
                    break;
                }

                case PlotlyTypes.table:
                    if (_plotLy.data.Count == 0)
                    {
                        _plotLy.AddData();
                        _plotLy.LastData.cells.values.Add(ts.TimesToPlotly().Select(x => (object) x).ToList());
                        _plotLy.LastData.header.values.Add("Время");
                    }

                    _plotLy.LastData.cells.values.Add(ts.Values.Select(x => (object) x).ToList());
                    _plotLy.LastData.header.values.Add(Data.TagDict[tag.tagId].TagName);

                    break;
                    
                default:
                    _plotLy.AddData();

                    _plotLy.LastData.x = ts.TimesToPlotly();
                    _plotLy.LastData.y = ts.Values;
                    break;
            }

            _plotLy.LastData.Mode(tag.DataModeLines, tag.DataModeMarkers, tag.DataModeText);
            _plotLy.LastData.name = Data.TagDict[tag.tagId].TagName;
            _plotLy.LastData.type = tag.plotlyType;
            _plotLy.LastData.yaxis = tag.yaxis;
        }

        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", "plotly", _plotLy);
    }

    private static async Task Purge()
    {
        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.purge", "plotly");
    }

    private static async Task DownloadImage()
    {
        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.downloadImage", "plotly");
    }

}