@* @page "/Plot" *@
@page "/Plot/{TagId}"
@using System.Globalization
@using Blazor.App.Services
@using SimpleProgram.Lib.JSInterop
@inject Data data

<style>
    /* .cell { border: 1px solid red; } */
</style>

<ul class="tabs" data-tabs id="example-tabs">
    <li class="tabs-title is-active">
        <a data-tabs-target="panel1" aria-selected="true">Выбор тегов</a>
    </li>
    <li class="tabs-title">
        <a data-tabs-target="panel2">График</a>
    </li>
</ul>

<div class="tabs-content" data-tabs-content="example-tabs">
    <div class="tabs-panel is-active" id="panel1">
        <div class="grid-x align-middle">
            <div class="cell small-12 large-6">
                <select bind="@_tagId0">
                    @foreach (var tag in data.TagDict)
                    {
                        <option value="@tag.Key">@tag.Value.ArchiveTagId</option>
                    }
                </select>
            </div>
            <div class="cell small-6 large-1">
                <button class="button expanded" onclick="@Build">Построить</button>
            </div>
        </div>
    </div>
    <div class="tabs-panel" id="panel2">
        <div id="plotly" style="height: 500px"></div>
    </div>
</div>


@functions
{

    protected override void OnInit()
    {
        base.OnInit();
        _tagId0 = TagId;
    }

    protected override void OnAfterRender()
    {
        if (_tagId0 != null)
        {
            Build();
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (_jqueryInitialized) return;
        _jqueryInitialized = await JSRuntime.Current.InvokeAsync<bool>("global.foundationInit");
    }

    private bool _jqueryInitialized;

    [Parameter]
    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    private string TagId { get; set; }

    private string _tagId0;

    private async void Build()
    {
        var plotly = new Plotly<string, double?>();

        if (_tagId0 != null)
        {
            var timeSeries = data.TagDict[_tagId0].GetTimeSeries().IncreaseCountByPeriod(ByPeriod.Day);

            plotly.data[0].x = timeSeries.Times.Select(x => x.ToString(CultureInfo.InvariantCulture)).ToList();
            plotly.data[0].y = timeSeries.Values;

            plotly.data[0].name = data.TagDict[_tagId0].TagName;
            plotly.data[0].type = PlotlyTypes.bar;
            plotly.layout.title = "";
        }

        await JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", "plotly", plotly);
    }

}