@using Blazor.App.Services
@using SimpleProgram.Lib.JSInterop
@using SimpleProgram.Lib.Tag
@inject Data data

<h1>Counter</h1>

<a href="#testanchor">testanchor</a>

<input type="number" bind="@Counter.ValueString"/>

<button class="button" onclick="@Prompt">Click me</button>

<button class="button" onclick="@On">on</button>
<button class="button" onclick="@Off">off</button>
<span class="@(State.GetValue<bool>() ? "success" : "secondary") label">label</span>

<div class="grid-x align-center">
    <div class="cell small-8">
        <select bind="@_selectedTag">
            @foreach (var tag in data.TagDict)
            {
                <option value="@tag.Key">@tag.Value.ArchiveTagId</option>
            }
        </select>
    </div>
    <div class="cell small-4">
        <button class="small button" onclick="@Prompt">Построить</button>
    </div>
</div>

<div id="plotly"></div>

<div id="testanchor"></div>

@functions {

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private Tag<bool> State { get; set; } = new Tag<bool>();

    [Parameter]
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    private ITag Counter { get; set; } = new Tag<double>();

    private Task<bool> Prompt()
    {
        var plotly = new Plotly();

        var timeSeries = data.TagDict[_selectedTag].GetTimeSeries(DateTime.MinValue, DateTime.MaxValue);

        plotly.data[0].x = timeSeries.Times.Select(x => x.ToString()).ToList();
        plotly.data[0].y = timeSeries.Values;

        return JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", "plotly", plotly);
    }

    

    private string _selectedTag;

    private void On()
    {
        State.SetValue(true);
    }

    private void Off()
    {
        State.SetValue(false);
    }

}