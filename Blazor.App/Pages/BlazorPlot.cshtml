@using Blazor.App.Services
@using SimpleProgram.Lib.JSInterop
@inject Data data

<h1>Counter</h1>

<input type="number" bind="@Counter.Value"/>

<button class="button" onclick="@Prompt">Click me</button>

<button class="button" onclick="@On">on</button>
<button class="button" onclick="@Off">off</button>
<span class="@((State.GetValue<bool>() ? "success" : "secondary")) label">label</span>

<div class="grid-x">
    <div class="small-8">
        <select bind="@_selectedTag">
            @foreach (var tag in data.TagDict)
            {
                <option value="@tag.Key">@tag.Value.ArchiveTagId</option>
            }
        </select>
    </div>
    <div class="small-4">
        <button class="small button" onclick="@Prompt">Построить</button>
    </div>
</div>


<div id="tester" style="height: 400px;"></div>

@functions {

    protected override void OnInit()
    {
        base.OnInit();

        if (State is null)
        {
            State = new Tag<bool>();
        }

        if (Counter is null)
        {
            Counter = new Tag<double>();
        }
    }

    [Parameter]
    private ITag<bool> State { get; set; }

    [Parameter]
    private ITag<double> Counter { get; set; }

    private Task<bool> Prompt()
    {
        Plotly<string, double> plotly = new Plotly<string, double>();

        TimeSeries timeSeries = data.TagDict[_selectedTag].GetTimeSeries();

        plotly.data[0].x = timeSeries.Times.Select(x => x.ToString()).ToList();
        plotly.data[0].y = timeSeries.Values;

        return JSRuntime.Current.InvokeAsync<bool>("plotlyhelpers.react", "tester", plotly);
    }

    private string _selectedTag;

    private void On()
    {
        State.SetValue(true);
    }

    private void Off()
    {
        State.SetValue(false);
    }
}